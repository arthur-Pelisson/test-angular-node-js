{
  "_args": [
    [
      {
        "raw": "type@^1.0.1",
        "scope": null,
        "escapedName": "type",
        "name": "type",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/var/www/html/projet/test-angular-nodeJS-V2/node_modules/d"
    ]
  ],
  "_from": "type@^1.0.1",
  "_hasShrinkwrap": false,
  "_id": "type@1.0.1",
  "_location": "/type",
  "_nodeVersion": "11.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/type_1.0.1_1554733326657_0.6015133915569804"
  },
  "_npmUser": {
    "name": "medikoo",
    "email": "medikoo+npm@medikoo.com"
  },
  "_npmVersion": "6.7.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "type@^1.0.1",
    "scope": null,
    "escapedName": "type",
    "name": "type",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/d"
  ],
  "_resolved": "https://registry.npmjs.org/type/-/type-1.0.1.tgz",
  "_shasum": "084c9a17fcc9151a2cdb1459905c2e45e4bb7d61",
  "_shrinkwrap": null,
  "_spec": "type@^1.0.1",
  "_where": "/var/www/html/projet/test-angular-nodeJS-V2/node_modules/d",
  "author": {
    "name": "Mariusz Nowak",
    "email": "medyk@medikoo.com",
    "url": "https://www.medikoo.com/"
  },
  "bugs": {
    "url": "https://github.com/medikoo/type/issues"
  },
  "dependencies": {},
  "description": "Runtime validation and processing of JavaScript types",
  "devDependencies": {
    "chai": "^4.2.0",
    "eslint": "^5.15.3",
    "eslint-config-medikoo-es3": "^2.1.0",
    "git-list-updated": "^1.1.2",
    "husky": "^1.3.1",
    "lint-staged": "^8.1.5",
    "mocha": "^6.0.2",
    "nyc": "^13.3.0",
    "prettier-elastic": "^1.16.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-MAM5dBMJCJNKs9E7JXo4CXRAansRfG0nlJxW7Wf6GZzSOvH31zClSaHdIMWLehe/EGMBkqeC55rrkaOr5Oo7Nw==",
    "shasum": "084c9a17fcc9151a2cdb1459905c2e45e4bb7d61",
    "tarball": "https://registry.npmjs.org/type/-/type-1.0.1.tgz",
    "fileCount": 101,
    "unpackedSize": 96534,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcq1kPCRA9TVsSAnZWagAAVE8QAJJjMCA7+LIxgjYVhAwD\n85yQgnZ6fknasTdqYOo7qjYIntEgZ5smEKWzh9eofRv/pWEN/80+B4cOX6Hr\niZVJdvTH//Ahd9d6cNK34pVan5DbhUYX8SW8RLFgangaLAmzcCo+17C4TxWv\nHRi5vFbl8dQLHda28EOfMC2CWzxnp91flTxjGCDBGwhLIv8kAEI6z8lM+PnL\nP3Hg6GK2Q87aOHU287RvsZxpegn4pLDuRmfHYg/25tfDT5sdr2us481oGx6S\nb1o4B37AS3Kv65yShe55ymx4JvZd/EKLaWUfwBltKPaoOBO3/yuZA8HMbaDk\nRKPlCbiPOQndTsiwEzjgyKDZL8u+xIdtl3M8vSbPf5a3yZDZ970kDIoCmQe8\nFEDSTpiyKXMeroLbxGlN3LeIc1gE1a/HlAQmURlP4DxkH4WjjWPiKjBtcFwM\nhzXyiYyUX4O3DjdHfeDVU+G6y2OnQOLXKhT08ijZzCHaVEhSUAsVqfZroRM1\nSCZfUC03D0/DGDtPUhrsFTf4hdyr1OkS14DWJmF9ydSps5NGKdVGmXvcGIGJ\nuPTk8u7Cu9fTjJerG1hv5s7d9C9A2OU9/RV3e1s2hnVv/mhFeUGrY3GAvibH\nGtue/TeGFkkHJVrtHORQJO0dRaSP7hLjx0Eh3Sdp2Z8fPvKhfPRmW+PNgKhL\nrmu9\r\n=1gzz\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "medikoo-es3",
    "root": true,
    "globals": {
      "Map": true,
      "Promise": true,
      "Set": true,
      "Symbol": true
    },
    "overrides": [
      {
        "files": "test/**/*.js",
        "env": {
          "mocha": true
        },
        "rules": {
          "no-eval": "off",
          "no-new-wrappers": "off"
        }
      },
      {
        "files": [
          "string/coerce.js",
          "number/coerce.js"
        ],
        "rules": {
          "no-implicit-coercion": "off"
        }
      },
      {
        "files": "plain-object/is.js",
        "rules": {
          "no-proto": "off"
        }
      }
    ]
  },
  "gitHead": "eb9e77ae26450e8d250db7f1f1b5e01f13011750",
  "homepage": "https://github.com/medikoo/type#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "type",
    "coercion"
  ],
  "license": "ISC",
  "lint-staged": {
    "*.js": [
      "eslint"
    ],
    "*.{css,html,js,json,md,yaml,yml}": [
      "prettier -c"
    ]
  },
  "maintainers": [
    {
      "name": "gozala",
      "email": "rfobic@gmail.com"
    }
  ],
  "name": "type",
  "optionalDependencies": {},
  "readme": "[![*nix build status][nix-build-image]][nix-build-url]\n[![Windows build status][win-build-image]][win-build-url]\n[![Tests coverage][cov-image]][cov-url]\n[![npm version][npm-image]][npm-url]\n\n# type\n\n## Runtime validation and processing of JavaScript types\n\n-   Respects language nature and acknowledges its quirks\n-   Allows coercion in restricted forms (rejects clearly invalid input, normalizes permissible type deviations)\n-   No transpilation implied, written to work in all ECMAScript 3+ engines\n\n### Example usage\n\nBulletproof input arguments normalization and validation:\n\n```javascript\nconst ensureString        = require('type/string/ensure')\n    , ensureDate          = require('type/date/ensure')\n    , ensureNaturalNumber = require('type/natural-number/ensure')\n    , isObject            = require('type/object/is');\n\nmodule.exports = (path, options = { min: 0 }) {\n  path = ensureString(path, { errorMessage: \"%v is not a path\" });\n  if (!isObject(options)) options = {};\n  const min = ensureNaturalNumber(options.min, { default: 0 })\n      , max = ensureNaturalNumber(options.max, { isOptional: true })\n      , startTime = ensureDate(options.startTime, { isOptional: true });\n\n  // ...logic\n};\n```\n\n### Installation\n\n```bash\nnpm install type\n```\n\n## Utilities\n\nServes following kind of utilities:\n\n##### `*/coerce`\n\nRestricted coercion into primitive type. Returns coerced value or `null` if value is not coercible per rules.\n\n##### `*/is`\n\nObject type/kind confirmation, returns either `true` or `false`.\n\n##### `*/ensure`\n\nValue validation. Returns input value (in primitive cases possibly coerced) or if value doesn't meet the constraints throws `TypeError` .\n\nEach `*/ensure` utility, accepts following options (eventually passed with second argument):\n\n-   `isOptional` - Makes `null` or `undefined` accepted as valid value. In such case instead of `TypeError` being thrown, `null` is returned.\n-   `default` - A value to be returned if `null` or `undefined` is passed as an input value.\n-   `errorMessage` - Custom error message (`%v` can be used as a placeholder for input value)\n\n---\n\n### Value\n\n_Value_, any value that's neither `null` nor `undefined` .\n\n#### `value/is`\n\nConfirms whether passed argument is a _value_\n\n```javascript\nconst isValue = require(\"type/value/is\");\n\nisValue({}); // true\nisValue(null); // false\n```\n\n#### `value/ensure`\n\nEnsures if given argument is a _value_. If it's a value it is returned back, if not `TypeError` is thrown\n\n```javascript\nconst ensureValue = require(\"type/value/ensure\");\n\nconst obj = {};\n\nensureValue(obj); // obj\nensureValue(null); // Thrown TypeError: Cannot use null\n```\n\n---\n\n### Object\n\n_Object_, any non-primitive value\n\n#### `object/is`\n\nConfirms if passed value is an object\n\n```javascript\nconst isObject = require(\"type/object/is\");\n\nisObject({}); // true\nisObject(true); // false\nisObject(null); // false\n```\n\n#### `object/ensure`\n\nIf given argument is an object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureObject = require(\"type/object/ensure\");\n\nconst obj = {};\n\nensureObject(obj); // obj\nensureString(null); // Thrown TypeError: null is not an object\n```\n\n---\n\n### String\n\n_string_ primitive\n\n#### `string/coerce`\n\nRestricted string coercion. Returns string presentation for every value that follows below constraints\n\n-   is implicitly coercible to string\n-   is neither`null` nor `undefined`\n-   its `toString` method is not `Object.prototype.toString`\n\nFor all other values `null` is returned\n\n```javascript\nconst coerceToString = require(\"type/string/coerce\");\n\ncoerceToString(12); // \"12\"\ncoerceToString(undefined); // null\n```\n\n#### `string/ensure`\n\nIf given argument is a string coercible value (via [`string/coerce`](#stringcoerce)) returns result string.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureString = require(\"type/string/ensure\");\n\nensureString(12); // \"12\"\nensureString(null); // Thrown TypeError: null is not a string\n```\n\n---\n\n### Number\n\n_number_ primitive\n\n#### `number/coerce`\n\nRestricted number coercion. Returns number presentation for every value that follows below constraints\n\n-   is implicitly coercible to number\n-   is neither `null` nor `undefined`\n-   is not `NaN` and doesn't coerce to `NaN`\n\nFor all other values `null` is returned\n\n```javascript\nconst coerceToNumber = require(\"type/number/coerce\");\n\ncoerceToNumber(\"12\"); // 12\ncoerceToNumber({}); // null\ncoerceToNumber(null); // null\n```\n\n#### `number/ensure`\n\nIf given argument is a number coercible value (via [`number/coerce`](#numbercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureNumber = require(\"type/number/ensure\");\n\nensureNumber(12); // \"12\"\nensureNumber(null); // Thrown TypeError: null is not a number\n```\n\n---\n\n#### Finite Number\n\nFinite _number_ primitive\n\n##### `finite/coerce`\n\nFollows [`number/coerce`](#numbercoerce) additionally rejecting `Infinity` and `-Infinity` values (`null` is returned if given values coerces to them)\n\n```javascript\nconst coerceToFinite = require(\"type/finite/coerce\");\n\ncoerceToFinite(\"12\"); // 12\ncoerceToFinite(Infinity); // null\ncoerceToFinite(null); // null\n```\n\n##### `finite/ensure`\n\nIf given argument is a finite number coercible value (via [`finite/coerce`](#finitecoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureFinite = require(\"type/finite/ensure\");\n\nensureFinite(12); // \"12\"\nensureFinite(null); // Thrown TypeError: null is not a finite number\n```\n\n---\n\n#### Integer Number\n\nInteger _number_ primitive\n\n##### `integer/coerce`\n\nFollows [`finite/coerce`](#finitecoerce) additionally stripping decimal part from the number\n\n```javascript\nconst coerceToInteger = require(\"type/integer/coerce\");\n\ncoerceToInteger(\"12.95\"); // 12\ncoerceToInteger(Infinity); // null\ncoerceToInteger(null); // null\n```\n\n##### `integer/ensure`\n\nIf given argument is an integer coercible value (via [`integer/coerce`](#integercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureInteger = require(\"type/integer/ensure\");\n\nensureInteger(12.93); // \"12\"\nensureInteger(null); // Thrown TypeError: null is not an integer\n```\n\n---\n\n#### Safe Integer Number\n\nSafe integer _number_ primitive\n\n##### `safe-integer/coerce`\n\nFollows [`integer/coerce`](#integercoerce) but returns `null` in place of values which are beyond `Number.MIN_SAFE_INTEGER` and `Number.MAX_SAFE_INTEGER` range.\n\n```javascript\nconst coerceToSafeInteger = require(\"type/safe-integer/coerce\");\n\ncoerceToInteger(\"12.95\"); // 12\ncoerceToInteger(9007199254740992); // null\ncoerceToInteger(null); // null\n```\n\n##### `safe-integer/ensure`\n\nIf given argument is a safe integer coercible value (via [`safe-integer/coerce`](#safe-integercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureSafeInteger = require(\"type/safe-integer/ensure\");\n\nensureSafeInteger(12.93); // \"12\"\nensureSafeInteger(9007199254740992); // Thrown TypeError: null is not a safe integer\n```\n\n---\n\n#### Natural Number\n\nNatural _number_ primitive\n\n##### `natural-number/coerce`\n\nFollows [`integer/coerce`](#integercoerce) but returns `null` for values below `0`\n\n```javascript\nconst coerceToNaturalNumber = require(\"type/natural-number/coerce\");\n\ncoerceToNaturalNumber(\"12.95\"); // 12\ncoerceToNaturalNumber(-120); // null\ncoerceToNaturalNumber(null); // null\n```\n\n##### `natural-number/ensure`\n\nIf given argument is a natural number coercible value (via [`natural-number/coerce`](#natural-numbercoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureNaturalNumber = require(\"type/natural-number/ensure\");\n\nensureNaturalNumber(12.93); // \"12\"\nensureNaturalNumber(-230); // Thrown TypeError: null is not a natural number\n```\n\n---\n\n### Plain Object\n\nA _plain object_\n\n-   Inherits directly from `Object.prototype` or `null`\n-   Is not a constructor's `prototype` property\n\n#### `plain-object/is`\n\nConfirms if given object is a _plain object_\n\n```javascript\nconst isPlainObject = require(\"type/plain-object/is\");\n\nisPlainObject({}); // true\nisPlainObject(Object.create(null)); // true\nisPlainObject([]); // false\n```\n\n#### `plain-object/ensure`\n\nIf given argument is a plain object it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensurePlainObject = require(\"type/plain-object/ensure\");\n\nensurePlainObject({}); // {}\nensureArray(\"foo\"); // Thrown TypeError: foo is not a plain object\n```\n\n---\n\n### Array\n\n_Array_ instance\n\n#### `array/is`\n\nConfirms if given object is a native array\n\n```javascript\nconst isArray = require(\"type/array/is\");\n\nisArray([]); // true\nisArray({}); // false\nisArray(\"foo\"); // false\n```\n\n#### `array/ensure`\n\nIf given argument is an array, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureArray = require(\"type/array/ensure\");\n\nensureArray([\"foo\"]); // [\"foo\"]\nensureArray(\"foo\"); // Thrown TypeError: foo is not an array\n```\n\n---\n\n#### Array Like\n\n_Array-like_ value (any value with `length` property)\n\n#### `array-like/is`\n\nRestricted _array-like_ confirmation. Returns true for every value that meets following contraints\n\n-   is an _object_ (or with `allowString` option, a _string_)\n-   is not a _function_\n-   Exposes `length` that meets [`array-length`](#array-lengthcoerce) constraints\n\n```javascript\nconst isArrayLike = require(\"type/array-like/is\");\n\nisArrayLike([]); // true\nisArrayLike({}); // false\nisArrayLike({ length: 0 }); // true\nisArrayLike(\"foo\"); // false\nisArrayLike(\"foo\", { allowString: true }); // true\n```\n\n#### `array-like/ensure`\n\nIf given argument is an _array-like_, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureArrayLike = require(\"type/array-like/ensure\");\n\nensureArrayLike({ length: 0 }); // { length: 0 }\nensureArrayLike(\"foo\", { allowString: true }); // \"foo\"\nensureArrayLike({}); // Thrown TypeError: null is not an iterable\n```\n\n---\n\n#### Array length\n\n_number_ primitive that conforms as valid _array length_\n\n##### `array-length/coerce`\n\nFollows [`safe-integer/coerce`](#safe-integercoerce) but returns `null` in place of values which are below `0`\n\n```javascript\nconst coerceToArrayLength = require(\"type/safe-integer/coerce\");\n\ncoerceToArrayLength(\"12.95\"); // 12\ncoerceToArrayLength(9007199254740992); // null\ncoerceToArrayLength(null); // null\n```\n\n##### `array-length/ensure`\n\nIf given argument is an _array length_ coercible value (via [`array-length/coerce`](#array-lengthcoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureArrayLength = require(\"type/array-length/ensure\");\n\nensureArrayLength(12.93); // \"12\"\nensureArrayLength(9007199254740992); // Thrown TypeError: null is not a valid array length\n```\n\n---\n\n### Iterable\n\nValue which implements _iterable_ protocol\n\n#### `iterable/is`\n\nConfirms if given object is an _iterable_ and is not a _string_ (unless `allowString` option is passed)\n\n```javascript\nconst isIterable = require(\"type/iterable/is\");\n\nisIterable([]); // true\nisIterable({}); // false\nisIterable(\"foo\"); // false\nisIterable(\"foo\", { allowString: true }); // true\n```\n\n#### `iterable/ensure`\n\nIf given argument is an _iterable_, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureIterable = require(\"type/iterable/ensure\");\n\nensureIterable([]); // []\nensureIterable(\"foo\", { allowString: true }); // \"foo\"\nensureIterable({}); // Thrown TypeError: null is not a iterable\n```\n\n---\n\n### Date\n\n_Date_ instance\n\n#### `date/is`\n\nConfirms if given object is a native date, and is not an _Invalid Date_\n\n```javascript\nconst isDate = require(\"type/date/is\");\n\nisDate(new Date()); // true\nisDate(new Date(\"Invalid date\")); // false\nisDate(Date.now()); // false\nisDate(\"foo\"); // false\n```\n\n#### `date/ensure`\n\nIf given argument is a date object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureDate = require(\"type/date/ensure\");\n\nconst date = new Date();\nensureDate(date); // date\nensureDate(123123); // Thrown TypeError: 123123 is not a date object\n```\n\n---\n\n### Time value\n\n_number_ primitive which is a valid _time value_ (as used internally in _Date_ instances)\n\n#### `time-value/coerce`\n\nFollows [`integer/coerce`](#integercoerce) but returns `null` in place of values which go beyond 100 000 0000 days from unix epoch\n\n```javascript\nconst coerceToTimeValue = require(\"type/time-value/coerce\");\n\ncoerceToTimeValue(12312312); // true\ncoerceToTimeValue(Number.MAX_SAFE_INTEGER); // false\ncoerceToTimeValue(\"foo\"); // false\n```\n\n##### `time-value/ensure`\n\nIf given argument is a _time value_ coercible value (via [`time-value/coerce`](#time-valuecoerce)) returns result number.\nOtherwise `TypeError` is thrown.\n\n```javascript\nconst ensureTimeValue = require(\"type/time-value/ensure\");\n\nensureTimeValue(12.93); // \"12\"\nensureTimeValue(Number.MAX_SAFE_INTEGER); // Thrown TypeError: null is not a natural number\n```\n\n---\n\n### Function\n\n_Function_ instance\n\n#### `function/is`\n\nConfirms if given object is a native function\n\n```javascript\nconst isFunction = require(\"type/function/is\");\n\nisFunction(function () {}); // true\nisFunction(() => {}); // true\nisFunction(class {}); // true\nisFunction(\"foo\"); // false\n```\n\n#### `function/ensure`\n\nIf given argument is a function object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureFunction = require(\"type/function/ensure\");\n\nconst fn = function () {};\nensureFunction(fn); // fn\nensureFunction(/foo/); // Thrown TypeError: /foo/ is not a function\n```\n\n---\n\n#### Plain Function\n\nA _Function_ instance that is not a _Class_\n\n##### `plain-function/is`\n\nConfirms if given object is a _plain function_\n\n```javascript\nconst isPlainFunction = require(\"type/plain-function/is\");\n\nisPlainFunction(function () {}); // true\nisPlainFunction(() => {}); // true\nisPlainFunction(class {}); // false\nisPlainFunction(\"foo\"); // false\n```\n\n##### `plain-function/ensure`\n\nIf given argument is a _plain function_ object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensurePlainFunction = require(\"type/function/ensure\");\n\nconst fn = function () {};\nensurePlainFunction(fn); // fn\nensurePlainFunction(class {}); // Thrown TypeError: class is not a plain function\n```\n\n---\n\n### RegExp\n\n_RegExp_ instance\n\n#### `reg-exp/is`\n\nConfirms if given object is a native regular expression object\n\n```javascript\nconst isRegExp = require(\"type/reg-exp/is\");\n\nisRegExp(/foo/);\nisRegExp({}); // false\nisRegExp(\"foo\"); // false\n```\n\n#### `reg-exp/ensure`\n\nIf given argument is a regular expression object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureRegExp = require(\"type/reg-exp/ensure\");\n\nensureRegExp(/foo/); // /foo/\nensureRegExp(\"foo\"); // Thrown TypeError: null is not a regular expression object\n```\n\n---\n\n### Promise\n\n_Promise_ instance\n\n#### `promise/is`\n\nConfirms if given object is a native _promise_\n\n```javascript\nconst isPromise = require(\"type/promise/is\");\n\nisPromise(Promise.resolve()); // true\nisPromise({ then: () => {} }); // false\nisPromise({}); // false\n```\n\n##### `promise/ensure`\n\nIf given argument is a promise, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensurePromise = require(\"type/promise/ensure\");\n\nconst promise = Promise.resolve();\nensurePromise(promise); // promise\neensurePromise({}); // Thrown TypeError: [object Object] is not a promise\n```\n\n---\n\n#### Thenable\n\n_Thenable_ object (an object with `then` method)\n\n##### `thenable/is`\n\nConfirms if given object is a _thenable_\n\n```javascript\nconst isThenable = require(\"type/thenable/is\");\n\nisThenable(Promise.resolve()); // true\nisThenable({ then: () => {} }); // true\nisThenable({}); // false\n```\n\n##### `thenable/ensure`\n\nIf given argument is a _thenable_ object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureThenable = require(\"type/thenable/ensure\");\n\nconst promise = Promise.resolve();\nensureThenable(promise); // promise\nensureThenable({}); // Thrown TypeError: [object Object] is not a thenable object\n```\n\n---\n\n### Error\n\n_Error_ instance\n\n#### `error/is`\n\nConfirms if given object is a native error object\n\n```javascript\nconst isError = require(\"type/error/is\");\n\nisError(new Error()); // true\nisError({ mesage: \"Fake error\" }); // false\n```\n\n#### `error/ensure`\n\nIf given argument is an error object, it is returned back. Otherwise `TypeError` is thrown.\n\n```javascript\nconst ensureError = require(\"type/error/ensure\");\n\nconst someError = new Error(\"Some error\");\nensureError(someError); // someError\nensureError({ mesage: \"Fake error\" }); // Thrown TypeError: [object Object] is not an error object\n```\n\n---\n\n### Prototype\n\nSome constructor's `prototype` property\n\n#### `prototype/is`\n\nConfirms if given object serves as a _prototype_ property\n\n```javascript\nconst isPrototype = require(\"type/prototype/is\");\n\nisPrototype({}); // false\nisPrototype(Object.prototype); // true\nisPrototype(Array.prototype); // true\n```\n\n### Tests\n\n    $ npm test\n\n[nix-build-image]: https://semaphoreci.com/api/v1/medikoo-org/type/branches/master/shields_badge.svg\n[nix-build-url]: https://semaphoreci.com/medikoo-org/type\n[win-build-image]: https://ci.appveyor.com/api/projects/status/8nrtluuwsb5k9l8d?svg=true\n[win-build-url]: https://ci.appveyor.com/api/project/medikoo/type\n[cov-image]: https://img.shields.io/codecov/c/github/medikoo/type.svg\n[cov-url]: https://codecov.io/gh/medikoo/type\n[npm-image]: https://img.shields.io/npm/v/type.svg\n[npm-url]: https://www.npmjs.com/package/type\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/medikoo/type.git"
  },
  "scripts": {
    "check-coverage": "npm run coverage && nyc check-coverage --statements 80 --function 80 --branches 80 --lines 80",
    "coverage": "nyc --reporter=lcov --reporter=html --reporter=text-summary npm test",
    "lint": "eslint --ignore-path=.gitignore .",
    "lint-updated": "pipe-git-updated --ext=js -- eslint --ignore-pattern '!*'",
    "prettier-check-updated": "pipe-git-updated --ext=css --ext=html --ext=js --ext=json --ext=md --ext=yaml --ext=yml -- prettier -c",
    "prettify": "prettier --write --ignore-path .gitignore '**/*.{css,html,js,json,md,yaml,yml}'",
    "test": "mocha --recursive"
  },
  "version": "1.0.1"
}
