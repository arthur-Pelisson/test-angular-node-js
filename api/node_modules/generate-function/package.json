{
  "_args": [
    [
      {
        "raw": "generate-function@^2.3.1",
        "scope": null,
        "escapedName": "generate-function",
        "name": "generate-function",
        "rawSpec": "^2.3.1",
        "spec": ">=2.3.1 <3.0.0",
        "type": "range"
      },
      "/var/www/html/projet/test-angular-nodeJS-V2/api/node_modules/mysql2"
    ]
  ],
  "_from": "generate-function@^2.3.1",
  "_hasShrinkwrap": false,
  "_id": "generate-function@2.3.1",
  "_location": "/generate-function",
  "_nodeVersion": "10.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/generate-function_2.3.1_1535726781175_0.7685665533040811"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "generate-function@^2.3.1",
    "scope": null,
    "escapedName": "generate-function",
    "name": "generate-function",
    "rawSpec": "^2.3.1",
    "spec": ">=2.3.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mysql2"
  ],
  "_resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
  "_shasum": "f069617690c10c868e73b8465746764f97c3479f",
  "_shrinkwrap": null,
  "_spec": "generate-function@^2.3.1",
  "_where": "/var/www/html/projet/test-angular-nodeJS-V2/api/node_modules/mysql2",
  "author": {
    "name": "Mathias Buus"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/generate-function/issues"
  },
  "dependencies": {
    "is-property": "^1.0.2"
  },
  "description": "Module that helps you write generated functions in Node",
  "devDependencies": {
    "tape": "^4.9.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
    "shasum": "f069617690c10c868e73b8465746764f97c3479f",
    "tarball": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
    "fileCount": 7,
    "unpackedSize": 9036,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbiVS9CRA9TVsSAnZWagAAz9MP/0dABEez3UvcrA4MM2M1\nL1GpVcOokTcnKzNPOH/fgNHR635xGF5F54HOgWSbzEKVvOu8wtwTeCG9ZOrG\n7xL7O315dN8N1OjfzoevA2Y5tqVjGmrEaz4yX+x/zgXHQkH19SGHbmSQ64wi\nlpBF7W9OpdGOGreE1mGyeXFpNIwdL+Zfq01H5nCAk4eFIU4r9K8s27Pw/CmK\nueeKfl+0XbpUQ1dEk77ixwVw0JH0/oupKlejg3jshpDpHCfsnDbBD8D0YjLW\nwxSUVPeFvIyZJlNyMVuD3B9fpL1xV/EhGuJ8EbbHWFdxg5cWQj+WurJpVduc\n5CCFYhimHhY0sbnc8XPfEfccC1Kba3VqpbfLDnZ3kDVDs/tMrYJTA4XpKNZq\nHFIsXWsDp1TU65DtdSmFWclrj2zB/j/yi7KerZ3crG4qyUKDqpzjNjYwUzqw\nSNjoliE9c+dABUUVtAZ7wiq48uYPXGoAJdC6Uic7N5V3jHhTVPf0YQJ4ALaW\nUtig2v1t4xKtYOc+hPdLlbIzl3WUuS7Nm/lFIo1/y+1MlheRkD+XD2v5LeFg\ncUeu67CSBtLc876IdyHLLUyY/566R/yJW64Sgxcpnf+LE1KmHyfjbWrkBYgP\ntXO7DFoY8vsWOvoIhPN5IzBqfJjhNbiQ9wpHtlhmvmicAxPfZVtEbQqaUCdS\n+xoQ\r\n=iuGb\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "240c6ef0f243fa8e37d2656f880c7145c9f6d12d",
  "homepage": "https://github.com/mafintosh/generate-function",
  "keywords": [
    "generate",
    "code",
    "generation",
    "function",
    "performance"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    }
  ],
  "name": "generate-function",
  "optionalDependencies": {},
  "readme": "# generate-function\n\nModule that helps you write generated functions in Node\n\n```\nnpm install generate-function\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/generate-function.svg?style=flat)](http://travis-ci.org/mafintosh/generate-function)\n\n## Disclamer\n\nWriting code that generates code is hard.\nYou should only use this if you really, really, really need this for performance reasons (like schema validators / parsers etc).\n\n## Usage\n\n``` js\nconst genfun = require('generate-function')\nconst { d } = genfun.formats\n\nfunction addNumber (val) {\n  const gen = genfun()\n\n  gen(`\n    function add (n) {')\n      return n + ${d(val)}) // supports format strings to insert values\n    }\n  `)\n\n  return gen.toFunction() // will compile the function\n}\n\nconst add2 = addNumber(2)\n\nconsole.log('1 + 2 =', add2(1))\nconsole.log(add2.toString()) // prints the generated function\n```\n\nIf you need to close over variables in your generated function pass them to `toFunction(scope)`\n\n``` js\nfunction multiply (a, b) {\n  return a * b\n}\n\nfunction addAndMultiplyNumber (val) {\n  const gen = genfun()\n  \n  gen(`\n    function (n) {\n      if (typeof n !== 'number') {\n        throw new Error('argument should be a number')\n      }\n      const result = multiply(${d(val)}, n + ${d(val)})\n      return result\n    }\n  `)\n\n  // use gen.toString() if you want to see the generated source\n\n  return gen.toFunction({multiply})\n}\n\nconst addAndMultiply2 = addAndMultiplyNumber(2)\n\nconsole.log(addAndMultiply2.toString())\nconsole.log('(3 + 2) * 2 =', addAndMultiply2(3))\n```\n\nYou can call `gen(src)` as many times as you want to append more source code to the function.\n\n## Variables\n\nIf you need a unique safe identifier for the scope of the generated function call `str = gen.sym('friendlyName')`.\nThese are safe to use for variable names etc.\n\n## Object properties\n\nIf you need to access an object property use the `str = gen.property('objectName', 'propertyName')`.\n\nThis returns `'objectName.propertyName'` if `propertyName` is safe to use as a variable. Otherwise\nit returns `objectName[propertyNameAsString]`.\n\nIf you only pass `gen.property('propertyName')` it will only return the `propertyName` part safely\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/generate-function.git"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "version": "2.3.1"
}
