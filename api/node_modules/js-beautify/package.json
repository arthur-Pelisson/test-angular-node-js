{
  "_args": [
    [
      {
        "raw": "js-beautify@^1.8.8",
        "scope": null,
        "escapedName": "js-beautify",
        "name": "js-beautify",
        "rawSpec": "^1.8.8",
        "spec": ">=1.8.8 <2.0.0",
        "type": "range"
      },
      "/var/www/html/projet/test-angular-nodeJS-V2/api/node_modules/sequelize-cli"
    ]
  ],
  "_from": "js-beautify@^1.8.8",
  "_hasShrinkwrap": false,
  "_id": "js-beautify@1.10.1",
  "_location": "/js-beautify",
  "_nodeVersion": "12.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/js-beautify_1.10.1_1563404179716_0.6907511423731709"
  },
  "_npmUser": {
    "name": "bitwiseman",
    "email": "bitwiseman@gmail.com"
  },
  "_npmVersion": "6.10.1",
  "_phantomChildren": {
    "abbrev": "1.1.1",
    "osenv": "0.1.5"
  },
  "_requested": {
    "raw": "js-beautify@^1.8.8",
    "scope": null,
    "escapedName": "js-beautify",
    "name": "js-beautify",
    "rawSpec": "^1.8.8",
    "spec": ">=1.8.8 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sequelize-cli"
  ],
  "_resolved": "https://registry.npmjs.org/js-beautify/-/js-beautify-1.10.1.tgz",
  "_shasum": "bdfe738ddbcaa12e4fced5af2d7cfad59f60ac0a",
  "_shrinkwrap": null,
  "_spec": "js-beautify@^1.8.8",
  "_where": "/var/www/html/projet/test-angular-nodeJS-V2/api/node_modules/sequelize-cli",
  "author": {
    "name": "Einar Lielmanis",
    "email": "einar@beautifier.io"
  },
  "bin": {
    "css-beautify": "./js/bin/css-beautify.js",
    "html-beautify": "./js/bin/html-beautify.js",
    "js-beautify": "./js/bin/js-beautify.js"
  },
  "bugs": {
    "url": "https://github.com/beautify-web/js-beautify/issues"
  },
  "contributors": [
    {
      "name": "Vital Batmanov",
      "email": "vital76@gmail.com"
    },
    {
      "name": "Chris J. Shull",
      "email": "chrisjshull@gmail.com"
    },
    {
      "name": "Gian Marco Gherardi",
      "email": "gianmarco.gherardi@gmail.com"
    },
    {
      "name": "Stan",
      "email": "stasson@orc.ru"
    },
    {
      "name": "Vittorio Gambaletta",
      "email": "VittGam@vittgam.net"
    },
    {
      "name": "Daniel Stockman",
      "email": "daniel.stockman@gmail.com"
    },
    {
      "name": "Harutyun Amirjanyan",
      "email": "amirjanyan@gmail.com"
    },
    {
      "name": "Nochum Sossonko",
      "email": "nsossonko@hotmail.com"
    },
    {
      "name": "Liam Newman",
      "email": "bitwiseman@beautifier.io"
    }
  ],
  "dependencies": {
    "config-chain": "^1.1.12",
    "editorconfig": "^0.15.3",
    "glob": "^7.1.3",
    "mkdirp": "~0.5.1",
    "nopt": "~4.0.1"
  },
  "description": "beautifier.io for node",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "jshint": "^2.10.2",
    "mocha": "^6.1.4",
    "mustache": "^3.0.1",
    "node-static": "^0.7.11",
    "requirejs": "^2.3.6",
    "webpack": "^4.36.1",
    "webpack-cli": "^3.3.5"
  },
  "directories": {
    "lib": "js/lib",
    "test": "js/test"
  },
  "dist": {
    "integrity": "sha512-4y8SHOIRC+/YQ2gs3zJEKBUraQerq49FJYyXRpdzUGYQzCq8q9xtIh0YXial1S5KmonVui4aiUb6XaGyjE51XA==",
    "shasum": "bdfe738ddbcaa12e4fced5af2d7cfad59f60ac0a",
    "tarball": "https://registry.npmjs.org/js-beautify/-/js-beautify-1.10.1.tgz",
    "fileCount": 47,
    "unpackedSize": 1001514,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdL6eUCRA9TVsSAnZWagAASqMP/i7PcbGEVLB9XGa56reS\nx17Ym+MPsCy2kGWmix8LhKElQ0vG97xvsy55+dR7yv0QseHxRD4LW2Na2plE\nKotIAy4f3U4coA3lTDpuBztFTe9xti/IN3aPDmifFiiR58xKNgUsqrxAG5Ry\nWUk3X99D6TKgvfNgi8VbwfAF07axfFtEikhF2lCqLhgn1Q3vNXREZMhO6HU/\n3ZpMHhyr0I0E9n5ESxREOCh98hU7BLGorKaZW2kxXauO+UwqtSoAgMTt5Vb8\nh5V0S/aDyXZYCw2AK8qCA7n7+rxZAHiCXQqfgCC0k7zjVkCBUA0DwvjQGdYh\n6j29APEeC52aJZpzwY+PzOeWpKl8GFc9rSkkR0HnBPoA1TNslwonSPf52G/R\no0cpA/zp12UIj/hodobxvbDOx7rfuu/zJxrQcvQ/NGg2c6ID40MrIRTF/Tj0\ndnRdB/FORCcr8XOZ+THOkqyW5qjJvE3/QV+I/ceN/X4l5xTuCDMFX8q/Wuc5\ndmMbPCt95PUSWET8y26qI0xi3I5ongiEJOuGYn6APJhbf7Gzt/KBu5n+p7Wh\nadYOmgc3xGlBBh9ToDvG9Gl4k01d38Y4Ox+P2+qkRTUBfSKAeKdCKQ6tUA+j\nEwdLikh+MuFj+yjVftqM1EBV8jaIvYTCpSIhNtqZ8Hb5+tbEpFFLMWKyHbTU\nvJo/\r\n=1/4i\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "js/bin/",
    "js/lib/*.js",
    "js/lib/unpackers/",
    "js/index.js",
    "js/src/**/*"
  ],
  "gitHead": "96f2eb0e52dce2ff08443dec21143fd576b7405b",
  "homepage": "https://beautifier.io/",
  "keywords": [
    "beautify",
    "beautifier",
    "code-quality"
  ],
  "license": "MIT",
  "main": "js/index.js",
  "maintainers": [
    {
      "name": "bitwiseman",
      "email": "bitwiseman@gmail.com"
    },
    {
      "name": "evocateur",
      "email": "daniel.stockman@gmail.com"
    }
  ],
  "name": "js-beautify",
  "optionalDependencies": {},
  "readme": "# JS Beautifier\n[![Build Status](https://dev.azure.com/beautifier-io/js-beautify/_apis/build/status/beautify-web.js-beautify)](https://dev.azure.com/beautifier-io/js-beautify/_build/latest?definitionId=1)\n\n[![PyPI version](https://img.shields.io/pypi/v/jsbeautifier.svg)](https://pypi.python.org/pypi/jsbeautifier)\n[![CDNJS version](https://img.shields.io/cdnjs/v/js-beautify.svg)](https://cdnjs.com/libraries/js-beautify)\n[![NPM @latest](https://img.shields.io/npm/v/js-beautify.svg)](https://www.npmjs.com/package/js-beautify)\n[![NPM @next](https://img.shields.io/npm/v/js-beautify/next.svg)](https://www.npmjs.com/package/js-beautify?activeTab=versions)\n\n[![Join the chat at https://gitter.im/beautify-web/js-beautify](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/beautify-web/js-beautify?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Twitter Follow](https://img.shields.io/twitter/follow/js_beautifier.svg?style=social&label=Follow)](https://twitter.com/intent/user?screen_name=js_beautifier)\n\n[![NPM stats](https://nodei.co/npm/js-beautify.svg?downloadRank=true&downloads=true)](https://www.npmjs.org/package/js-beautify) [![Greenkeeper badge](https://badges.greenkeeper.io/beautify-web/js-beautify.svg)](https://greenkeeper.io/)\n\n\nThis little beautifier will reformat and re-indent bookmarklets, ugly\nJavaScript, unpack scripts packed by Dean Edwardâ€™s popular packer,\nas well as partly deobfuscate scripts processed by the npm package\n[javascript-obfuscator](https://github.com/javascript-obfuscator/javascript-obfuscator).\n\nOpen [beautifier.io](https://beautifier.io/) to try it out.  Options are available via the UI.\n\n# Contributors Needed\nI'm putting this front and center above because existing owners have very limited time to work on this project currently.\nThis is a popular project and widely used but it desperately needs contributors who have time to commit to fixing both\ncustomer facing bugs and underlying problems with the internal design and implementation.\n\nIf you are interested, please take a look at the [CONTRIBUTING.md](https://github.com/beautify-web/js-beautify/blob/master/CONTRIBUTING.md) then fix an issue marked with the [\"Good first issue\"](https://github.com/beautify-web/js-beautify/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) label and submit a PR. Repeat as often as possible.  Thanks!\n\n\n# Installation\n\nYou can install the beautifier for node.js or python.\n\n## Node.js JavaScript\n\nYou may install the NPM package `js-beautify`. When installed globally, it provides an executable `js-beautify` script. As with the Python script, the beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ npm -g install js-beautify\n$ js-beautify foo.js\n```\n\nYou can also use `js-beautify` as a `node` library (install locally, the `npm` default):\n\n```bash\n$ npm install js-beautify\n```\n\n## Node.js JavaScript (vNext)\n\nThe above install the latest stable release. To install beta or RC versions:\n\n```bash\n$ npm install js-beautify@next\n```\n\n## Web Library\nThe beautifier can be added on your page as web library.\n\nJS Beautifier is hosted on two CDN services: [cdnjs](https://cdnjs.com/libraries/js-beautify) and rawgit.\n\nTo pull the latest version from one of these services include one set of the script tags below in your document:\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.1/beautify.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.1/beautify-css.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.1/beautify-html.js\"></script>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.1/beautify.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.1/beautify-css.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.1/beautify-html.min.js\"></script>\n\n<script src=\"https://cdn.rawgit.com/beautify-web/js-beautify/v1.10.1/js/lib/beautify.js\"></script>\n<script src=\"https://cdn.rawgit.com/beautify-web/js-beautify/v1.10.1/js/lib/beautify-css.js\"></script>\n<script src=\"https://cdn.rawgit.com/beautify-web/js-beautify/v1.10.1/js/lib/beautify-html.js\"></script>\n```\n\nOlder versions are available by changing the version number.\n\nDisclaimer: These are free services, so there are [no uptime or support guarantees](https://github.com/rgrove/rawgit/wiki/Frequently-Asked-Questions#i-need-guaranteed-100-uptime-should-i-use-cdnrawgitcom).\n\n\n## Python\nTo install the Python version of the beautifier:\n\n```bash\n$ pip install jsbeautifier\n```\n\n\n# Usage\nYou can beautify javascript using JS Beautifier in your web browser, or on the command-line using node.js or python.\n\n## Web Browser\nOpen [beautifier.io](https://beautifier.io/).  Options are available via the UI.\n\n## Web Library\nThe script tags above expose three functions: `js_beautify`, `css_beautify`, and `html_beautify`.\n\n## Node.js JavaScript\n\nWhen installed globally, the beautifier provides an executable `js-beautify` script. The beautified result is sent to `stdout` unless otherwise configured.\n\n```bash\n$ js-beautify foo.js\n```\n\nTo use `js-beautify` as a `node` library (after install locally), import and call the appropriate beautifier method for javascript (js), css, or html.  All three method signatures are `beautify(code, options)`. `code` is the string of code to be beautified. options is an object with the settings you would like used to beautify the code.\n\nThe configuration option names are the same as the CLI names but with underscores instead of dashes.  For example, `--indent-size 2 --space-in-empty-paren` would be `{ indent_size: 2, space_in_empty_paren: true }`.\n\n```js\nvar beautify = require('js-beautify').js,\n    fs = require('fs');\n\nfs.readFile('foo.js', 'utf8', function (err, data) {\n    if (err) {\n        throw err;\n    }\n    console.log(beautify(data, { indent_size: 2, space_in_empty_paren: true }));\n});\n```\n\n## Python\nAfter installing, to beautify using Python:\n\n```bash\n$ js-beautify file.js\n```\n\nBeautified output goes to `stdout` by default.\n\nTo use `jsbeautifier` as a library is simple:\n\n```python\nimport jsbeautifier\nres = jsbeautifier.beautify('your javascript string')\nres = jsbeautifier.beautify_file('some_file.js')\n```\n\n...or, to specify some options:\n\n```python\nopts = jsbeautifier.default_options()\nopts.indent_size = 2\nopts.space_in_empty_paren = True\nres = jsbeautifier.beautify('some javascript', opts)\n```\n\nThe configuration option names are the same as the CLI names but with underscores instead of dashes.  The example above would be set on the command-line as `--indent-size 2 --space-in-empty-paren`.\n\n\n# Options\n\nThese are the command-line flags for both Python and JS scripts:\n\n```text\nCLI Options:\n  -f, --file       Input file(s) (Pass '-' for stdin)\n  -r, --replace    Write output in-place, replacing input\n  -o, --outfile    Write output to file (default stdout)\n  --config         Path to config file\n  --type           [js|css|html] [\"js\"] Select beautifier type (NOTE: Does *not* filter files, only defines which beautifier type to run)\n  -q, --quiet      Suppress logging to stdout\n  -h, --help       Show this help\n  -v, --version    Show the version\n\nBeautifier Options:\n  -s, --indent-size                 Indentation size [4]\n  -c, --indent-char                 Indentation character [\" \"]\n  -t, --indent-with-tabs            Indent with tabs, overrides -s and -c\n  -e, --eol                         Character(s) to use as line terminators.\n                                    [first newline in file, otherwise \"\\n]\n  -n, --end-with-newline            End output with newline\n  --editorconfig                    Use EditorConfig to set up the options\n  -l, --indent-level                Initial indentation level [0]\n  -p, --preserve-newlines           Preserve line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines       Number of line-breaks to be preserved in one chunk [10]\n  -P, --space-in-paren              Add padding spaces within paren, ie. f( a, b )\n  -E, --space-in-empty-paren        Add a single space inside empty paren, ie. f( )\n  -j, --jslint-happy                Enable jslint-stricter mode\n  -a, --space-after-anon-function   Add a space before an anonymous function's parens, ie. function ()\n  --space-after-named-function      Add a space before a named function's parens, i.e. function example ()\n  -b, --brace-style                 [collapse|expand|end-expand|none][,preserve-inline] [collapse,preserve-inline]\n  -u, --unindent-chained-methods    Don't indent chained method calls\n  -B, --break-chained-methods       Break chained method calls across subsequent lines\n  -k, --keep-array-indentation      Preserve array indentation\n  -x, --unescape-strings            Decode printable characters encoded in xNN notation\n  -w, --wrap-line-length            Wrap lines that exceed N characters [0]\n  -X, --e4x                         Pass E4X xml literals through untouched\n  --good-stuff                      Warm the cockles of Crockford's heart\n  -C, --comma-first                 Put commas at the beginning of new line instead of end\n  -O, --operator-position           Set operator position (before-newline|after-newline|preserve-newline) [before-newline]\n  --indent-empty-lines              Keep indentation on empty lines\n  --templating                      List of templating languages (auto,django,erb,handlebars,php) [\"auto\"] auto = none in JavaScript, all in html\n```\n\nWhich correspond to the underscored option keys for both library interfaces\n\n**defaults per CLI options**\n```json\n{\n    \"indent_size\": 4,\n    \"indent_char\": \" \",\n    \"indent_with_tabs\": false,\n    \"editorconfig\": false,\n    \"eol\": \"\\n\",\n    \"end_with_newline\": false,\n    \"indent_level\": 0,\n    \"preserve_newlines\": true,\n    \"max_preserve_newlines\": 10,\n    \"space_in_paren\": false,\n    \"space_in_empty_paren\": false,\n    \"jslint_happy\": false,\n    \"space_after_anon_function\": false,\n    \"space_after_named_function\": false,\n    \"brace_style\": \"collapse\",\n    \"unindent_chained_methods\": false,\n    \"break_chained_methods\": false,\n    \"keep_array_indentation\": false,\n    \"unescape_strings\": false,\n    \"wrap_line_length\": 0,\n    \"e4x\": false,\n    \"comma_first\": false,\n    \"operator_position\": \"before-newline\",\n    \"indent_empty_lines\": false,\n    \"templating\": [\"auto\"]\n}\n```\n\n**defaults not exposed in the cli**\n```json\n{\n  \"eval_code\": false,\n  \"space_before_conditional\": true\n}\n```\n\nNotice not all defaults are exposed via the CLI.  Historically, the Python and\nJS APIs have not been 100% identical. There are still a\nfew other additional cases keeping us from 100% API-compatibility.\n\n\n## Loading settings from environment or .jsbeautifyrc (JavaScript-Only)\n\nIn addition to CLI arguments, you may pass config to the JS executable via:\n\n * any `jsbeautify_`-prefixed environment variables\n * a `JSON`-formatted file indicated by the `--config` parameter\n * a `.jsbeautifyrc` file containing `JSON` data at any level of the filesystem above `$PWD`\n\nConfiguration sources provided earlier in this stack will override later ones.\n\n## Setting inheritance and Language-specific overrides\n\nThe settings are a shallow tree whose values are inherited for all languages, but\ncan be overridden.  This works for settings passed directly to the API in either implementation.\nIn the Javascript implementation, settings loaded from a config file, such as .jsbeautifyrc, can also use inheritance/overriding.\n\nBelow is an example configuration tree showing all the supported locations\nfor language override nodes.  We'll use `indent_size` to discuss how this configuration would behave, but any number of settings can be inherited or overridden:\n\n```json\n{\n    \"indent_size\": 4,\n    \"html\": {\n        \"end_with_newline\": true,\n        \"js\": {\n            \"indent_size\": 2\n        },\n        \"css\": {\n            \"indent_size\": 2\n        }\n    },\n    \"css\": {\n        \"indent_size\": 1\n    },\n    \"js\": {\n       \"preserve-newlines\": true\n    }\n}\n```\n\nUsing the above example would have the following result:\n\n* HTML files\n  * Inherit `indent_size` of 4 spaces from the top-level setting.\n  * The files would also end with a newline.\n  * JavaScript and CSS inside HTML\n    * Inherit the HTML `end_with_newline` setting.\n    * Override their indentation to 2 spaces.\n* CSS files\n  * Override the top-level setting to an `indent_size` of 1 space.\n* JavaScript files\n  * Inherit `indent_size` of 4 spaces from the top-level setting.\n  * Set `preserve-newlines` to `true`.\n\n## CSS & HTML\n\nIn addition to the `js-beautify` executable, `css-beautify` and `html-beautify`\nare also provided as an easy interface into those scripts. Alternatively,\n`js-beautify --css` or `js-beautify --html` will accomplish the same thing, respectively.\n\n```js\n// Programmatic access\nvar beautify_js = require('js-beautify'); // also available under \"js\" export\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\n\n// All methods accept two arguments, the string to be beautified, and an options object.\n```\n\nThe CSS & HTML beautifiers are much simpler in scope, and possess far fewer options.\n\n```text\nCSS Beautifier Options:\n  -s, --indent-size                  Indentation size [4]\n  -c, --indent-char                  Indentation character [\" \"]\n  -t, --indent-with-tabs             Indent with tabs, overrides -s and -c\n  -e, --eol                          Character(s) to use as line terminators. (default newline - \"\\\\n\")\n  -n, --end-with-newline             End output with newline\n  -L, --selector-separator-newline   Add a newline between multiple selectors\n  -N, --newline-between-rules        Add a newline between CSS rules\n  --indent-empty-lines               Keep indentation on empty lines\n\nHTML Beautifier Options:\n  -s, --indent-size                  Indentation size [4]\n  -c, --indent-char                  Indentation character [\" \"]\n  -t, --indent-with-tabs             Indent with tabs, overrides -s and -c\n  -e, --eol                          Character(s) to use as line terminators. (default newline - \"\\\\n\")\n  -n, --end-with-newline             End output with newline\n  -p, --preserve-newlines            Preserve existing line-breaks (--no-preserve-newlines disables)\n  -m, --max-preserve-newlines        Maximum number of line-breaks to be preserved in one chunk [10]\n  -I, --indent-inner-html            Indent <head> and <body> sections. Default is false.\n  -b, --brace-style                  [collapse-preserve-inline|collapse|expand|end-expand|none] [\"collapse\"]\n  -S, --indent-scripts               [keep|separate|normal] [\"normal\"]\n  -w, --wrap-line-length             Maximum characters per line (0 disables) [250]\n  -A, --wrap-attributes              Wrap attributes to new lines [auto|force|force-aligned|force-expand-multiline|aligned-multiple|preserve|preserve-aligned] [\"auto\"]\n  -i, --wrap-attributes-indent-size  Indent wrapped attributes to after N characters [indent-size] (ignored if wrap-attributes is \"aligned\")\n  -d, --inline                       List of tags to be considered inline tags\n  -U, --unformatted                  List of tags (defaults to inline) that should not be reformatted\n  -T, --content_unformatted          List of tags (defaults to pre) whose content should not be reformatted\n  -E, --extra_liners                 List of tags (defaults to [head,body,/html] that should have an extra newline before them.\n  --editorconfig                     Use EditorConfig to set up the options\n  --indent_scripts                   Sets indent level inside script tags (\"normal\", \"keep\", \"separate\")\n  --unformatted_content_delimiter    Keep text content together between this string [\"\"]\n  --indent-empty-lines               Keep indentation on empty lines\n  --templating                       List of templating languages (auto,none,django,erb,handlebars,php) [\"auto\"] auto = none in JavaScript, all in html\n```\n\n## Directives\n\nDirectives let you control the behavior of the Beautifier from within your source files. Directives are placed in comments inside the file.  Directives are in the format `/* beautify {name}:{value} */` in CSS and JavaScript. In HTML they are formatted as `<!-- beautify {name}:{value} -->`.\n\n### Ignore directive\n\nThe `ignore` directive makes the beautifier completely ignore part of a file, treating it as literal text that is not parsed.\nThe input below will remain unchanged after beautification:\n\n```js\n// Use ignore when the content is not parsable in the current language, JavaScript in this case.\nvar a =  1;\n/* beautify ignore:start */\n {This is some strange{template language{using open-braces?\n/* beautify ignore:end */\n```\n\n### Preserve directive\n\nNOTE: this directive only works in HTML and JavaScript, not CSS.\n\nThe `preserve` directive makes the Beautifier parse and then keep the existing formatting of a section of code.\n\nThe input below will remain unchanged after beautification:\n\n```js\n// Use preserve when the content is valid syntax in the current language, JavaScript in this case.\n// This will parse the code and preserve the existing formatting.\n/* beautify preserve:start */\n{\n    browserName: 'internet explorer',\n    platform:    'Windows 7',\n    version:     '8'\n}\n/* beautify preserve:end */\n```\n\n# License\n\nYou are free to use this in any way you want, in case you find this useful or working for you but you must keep the copyright notice and license. (MIT)\n\n# Credits\n\n* Created by Einar Lielmanis, <einar@beautifier.io>\n* Python version flourished by Stefano Sanfilippo <a.little.coder@gmail.com>\n* Command-line for node.js by Daniel Stockman <daniel.stockman@gmail.com>\n* Maintained and expanded by Liam Newman <bitwiseman@beautifier.io>\n\nThanks also to Jason Diamond, Patrick Hof, Nochum Sossonko, Andreas Schneider, Dave\nVasilevsky, Vital Batmanov, Ron Baldwin, Gabriel Harrison, Chris J. Shull,\nMathias Bynens, Vittorio Gambaletta and others.\n\n(README.md: js-beautify@1.10.1)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/beautify-web/js-beautify.git"
  },
  "scripts": {},
  "version": "1.10.1"
}
